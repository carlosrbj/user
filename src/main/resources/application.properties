#swagger
#http://localhost:2021/order-service/swagger-ui.html
#spring.mvc.pathmatch.matching-strategy=ant-path-matcher
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/documentdb?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true

##configurações com o nome da aplicação e endereço do servidor
## server.port=0 deixa que o eureka controle a porta que o serviço vai subir
## pois vamos buscar ele pelo nome
#spring.application.name=user-service
#eureka.client.serviceUrl.defaultZone=http://localhost:2020/eureka
##Ao subi a instancia é gerado um id com o nome da aplicação + um numero aleatorio
#eureka.instance.instance-id=${spring.application.name}:${random.int}
##para conferir se as requisiçoes estao sendo distribuidas rodar o método
#
#server.port=0

server.error.include-message=always

server.error.whitelabel.enabled=false
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration

#for Spring Boot 2.0
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration

## --- CONFIGURAÇÃO TYMELEAF ---
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.cache=false
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.check-template-location=true
#spring.thymeleaf.enabled=true